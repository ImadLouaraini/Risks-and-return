import pandas as pd
import numpy as np
from scipy.stats import skew, kurtosis
import os
from flask import Flask, request, render_template_string
import plotly.graph_objs as go
import plotly.io as pio
import shutil

app = Flask(__name__)

# Ensure static directory and logo image exist
STATIC_DIR = os.path.join(os.path.dirname(__file__), 'static')
LOGO_SRC = r"C:\Users\imadl\Downloads\Black_and_Gold_Royal_Company_Logo__1_-removebg-preview.png"
LOGO_DEST = os.path.join(STATIC_DIR, 'capital_logo.png')
if not os.path.exists(STATIC_DIR):
    os.makedirs(STATIC_DIR)
if os.path.exists(LOGO_SRC):
    shutil.copy(LOGO_SRC, LOGO_DEST)

HTML_FORM = '''
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Luxury Portfolio & Hedge Fund Analyzer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;900&family=Playfair+Display:wght@400;700;900&display=swap" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #56382D 0%, #1B1821 100%);
      color: #FFD700;
      font-family: 'Montserrat', sans-serif;
      min-height: 100vh;
    }
    .lux-header {
      background: #935F4C;
      color: #FFFAE5;
      padding: 0.5rem 0 0.5rem 0;
      text-align: center;
      border-bottom: 2px solid #935F4C44;
      box-shadow: 0 4px 24px #56382D44;
    }
    .lux-header img {
      height: 220px;
      max-width: 660px;
      margin-bottom: 0;
      margin-top: 0;
      display: block;
      margin-left: auto;
      margin-right: auto;
    }
    .lux-header h1 {
      color: #FFFAE5;
      margin-top: 0.2rem;
      margin-bottom: 0.5rem;
      font-weight:900; 
      letter-spacing:2px;
    }
    .lux-header p {
      color: #FFD700;
      font-size:1.2rem;
      opacity: 0.95;
      margin-top: 0;
      margin-bottom: 0;
      text-align: center;
      font-family: 'Montserrat', sans-serif;
      font-weight: 700;
      letter-spacing: 0.5px;
    }
    .lux-card {
      background: #935F4C;
      border-radius: 1.5rem;
      box-shadow: 0 4px 32px #56382D22;
      border: 1px solid #56382D33;
      padding: 2rem 2.5rem;
      margin: 2rem auto;
      max-width: 600px;
      color: #FFFAE5;
    }
    .lux-card label {
      color: #FFFAE5;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }
    .lux-btn {
      background: linear-gradient(90deg, #FFFAE5 0%, #935F4C 100%);
      color: #1B1821;
      font-weight: 900;
      border: none;
      border-radius: 2rem;
      padding: 0.75rem 2.5rem;
      font-size: 1.2rem;
      transition: box-shadow 0.2s, transform 0.2s;
      box-shadow: 0 2px 8px #56382D33;
    }
    .lux-btn:hover {
      box-shadow: 0 4px 24px #935F4C99;
      transform: translateY(-2px) scale(1.03);
      color: #56382D;
    }
    .lux-results {
      background: #935F4C;
      border-radius: 1.5rem;
      border: 1px solid #935F4C33;
      box-shadow: 0 2px 16px #56382D22;
      padding: 2rem;
      margin: 2rem auto 0 auto;
      max-width: 700px;
      color: #FFD700;
      font-size: 1.1rem;
      white-space: normal;
    }
    .result-section {
      margin-bottom: 2rem;
    }
    .result-title {
      font-size: 1.3rem;
      font-weight: 900;
      color: #FFFAE5;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-family: 'Playfair Display', serif;
      letter-spacing: 1px;
    }
    .result-table {
      color: #1B1821;
      background: #FFFAE5;
      border-radius: 1rem;
      border: 1px solid #935F4C33;
      margin-bottom: 1rem;
      width: 100%;
    }
    .result-table th, .result-table td {
      padding: 0.5rem 1rem;
      border-bottom: 1px solid #935F4C22;
    }
    .result-table th {
      color: #56382D;
      font-weight: 700;
      background: #FFFAE5;
    }
    .result-table tr:last-child td {
      border-bottom: none;
    }
    .emoji {
      font-size: 1.5rem;
      margin-right: 0.3rem;
    }
    .plotly-graph {
      background: #FFFAE5;
      border-radius: 1rem;
      margin-bottom: 1.5rem;
      padding: 1rem;
    }
    .lux-card, .lux-results, .result-table, .result-section, .result-title, .lux-btn {
      font-family: 'Montserrat', sans-serif;
    }
    .result-title, .lux-header h1 {
      font-family: 'Playfair Display', serif;
      font-weight: 900;
      letter-spacing: 1px;
    }
    @media (max-width: 600px) {
      .lux-card, .lux-results { padding: 1rem; }
      .lux-header { font-size: 1.2rem; }
      .plotly-graph { padding: 0.2rem; }
    }
  </style>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
  <div class="lux-header">
    <img src="{{ url_for('static', filename='capital_logo.png') }}" alt="Capital Logo">
    <p>Analyze your portfolios and hedge fund indices with style</p>
  </div>
  <div class="lux-card">
    <form method=post enctype=multipart/form-data>
      <div class="mb-3">
        <label for="me_file">Upload Portfolio CSV (e.g., Portfolios_Formed_on_ME_monthly_EW.csv):</label>
        <input type=file name=me_file class="form-control" required>
      </div>
      <div class="mb-3">
        <label for="edhec_file">Upload Hedge Fund Indices CSV (e.g., edhec-hedgefundindices.csv):</label>
        <input type=file name=edhec_file class="form-control" required>
      </div>
      <div class="row mb-3">
        <div class="col">
          <label for="main_start">Main Period Start:</label>
          <input type="month" name="main_start" class="form-control" value="1990-01">
        </div>
        <div class="col">
          <label for="main_end">Main Period End:</label>
          <input type="month" name="main_end" class="form-control" value="2020-12">
        </div>
      </div>
      <div class="row mb-3">
        <div class="col">
          <label for="sub_start">Sub Period Start:</label>
          <input type="month" name="sub_start" class="form-control" value="1999-01">
        </div>
        <div class="col">
          <label for="sub_end">Sub Period End:</label>
          <input type="month" name="sub_end" class="form-control" value="2015-12">
        </div>
      </div>
      <div class="text-center">
        <button type=submit class="lux-btn">Analyze</button>
      </div>
    </form>
  </div>
  {% if results %}
    <div class="lux-results">{{ results|safe }}</div>
  {% endif %}
  <footer style="text-align:center; margin:2rem 0 1rem 0; color:#FFD700; font-family:'Montserrat',sans-serif; font-size:1.1rem; letter-spacing:1px; opacity:0.85;">
    <span>Signed by <b>imad louaraini</b></span>
  </footer>
</body>
</html>
'''

# Statistical functions
def annualized_return(r):
    compounded_growth = (1 + r).prod()
    n_months = r.shape[0]
    return compounded_growth ** (12 / n_months) - 1

def annualized_volatility(r):
    return r.std() * np.sqrt(12)

def max_drawdown(r):
    wealth_index = (1 + r).cumprod()
    previous_peaks = wealth_index.cummax()
    drawdowns = (previous_peaks - wealth_index) / previous_peaks
    return drawdowns.max(), drawdowns.idxmax()

def clean_series(series):
    s = pd.Series(series).dropna()
    return s[np.isfinite(s)]

def semideviation(series):
    s = clean_series(series)
    return s[s < s.mean()].std()

def safe_stat(func, series):
    s = clean_series(series)
    return func(s) if not s.empty else np.nan

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    results = ""
    plot_html = ""
    if request.method == 'POST':
        me_file = request.files['me_file']
        edhec_file = request.files['edhec_file']
        # Get date ranges from form
        main_start = request.form.get('main_start', '1990-01')
        main_end = request.form.get('main_end', '2020-12')
        sub_start = request.form.get('sub_start', '1999-01')
        sub_end = request.form.get('sub_end', '2015-12')
        # Convert to datetime
        main_start_dt = pd.to_datetime(main_start + '-01')
        main_end_dt = pd.to_datetime(main_end + '-01') + pd.offsets.MonthEnd(0)
        sub_start_dt = pd.to_datetime(sub_start + '-01')
        sub_end_dt = pd.to_datetime(sub_end + '-01') + pd.offsets.MonthEnd(0)

        if not me_file or not edhec_file:
            results = "<div class='alert alert-warning'>Please upload both files.</div>"
            return render_template_string(HTML_FORM, results=results)

        # --- Load ME file ---
        df = pd.read_csv(me_file)
        df.columns = df.columns.str.strip()
        date_col = df.columns[0]
        df[date_col] = pd.to_datetime(df[date_col], format='%Y%m')
        df.set_index(date_col, inplace=True)
        df.replace([-99.99, -999], np.nan, inplace=True)

        lo20_col = next(col for col in df.columns if 'lo 20' in col.lower())
        hi20_col = next(col for col in df.columns if 'hi 20' in col.lower())

        lo20_returns = df[lo20_col] / 100
        hi20_returns = df[hi20_col] / 100
        lo20_returns = lo20_returns.dropna()
        hi20_returns = hi20_returns.dropna()

        # Slice for main period
        lo20_main = lo20_returns.loc[(lo20_returns.index >= main_start_dt) & (lo20_returns.index <= main_end_dt)]
        hi20_main = hi20_returns.loc[(hi20_returns.index >= main_start_dt) & (hi20_returns.index <= main_end_dt)]

        # Plotly graph for returns (main period)
        fig = go.Figure()
        # Main return lines
        fig.add_trace(go.Scatter(x=lo20_main.index, y=lo20_main, mode='lines', name='Lo 20', line=dict(color='#FFD700', width=3)))
        fig.add_trace(go.Scatter(x=hi20_main.index, y=hi20_main, mode='lines', name='Hi 20', line=dict(color='#00BFFF', width=3)))
        # Drawdown calculation
        lo20_wealth = (1 + lo20_main).cumprod()
        lo20_peaks = lo20_wealth.cummax()
        lo20_drawdown = (lo20_wealth - lo20_peaks) / lo20_peaks
        hi20_wealth = (1 + hi20_main).cumprod()
        hi20_peaks = hi20_wealth.cummax()
        hi20_drawdown = (hi20_wealth - hi20_peaks) / hi20_peaks
        # Drawdown area
        fig.add_trace(go.Scatter(x=lo20_main.index, y=lo20_drawdown, fill='tozeroy', mode='lines', name='Lo 20 Drawdown', line=dict(color='rgba(255,215,0,0.3)', width=0)))
        fig.add_trace(go.Scatter(x=hi20_main.index, y=hi20_drawdown, fill='tozeroy', mode='lines', name='Hi 20 Drawdown', line=dict(color='rgba(0,191,255,0.3)', width=0)))
        # Expected return lines
        lo20_exp_ret = annualized_return(lo20_main) / 12
        hi20_exp_ret = annualized_return(hi20_main) / 12
        fig.add_trace(go.Scatter(x=lo20_main.index, y=[lo20_exp_ret]*len(lo20_main), mode='lines', name='Lo 20 Expected Return', line=dict(color='#FFD700', dash='dash', width=2)))
        fig.add_trace(go.Scatter(x=hi20_main.index, y=[hi20_exp_ret]*len(hi20_main), mode='lines', name='Hi 20 Expected Return', line=dict(color='#00BFFF', dash='dash', width=2)))
        fig.update_layout(
            title='Portfolio Returns, Drawdown, and Expected Return (Main Period)',
            plot_bgcolor='#232946',
            paper_bgcolor='#232946',
            font=dict(color='#FFD700'),
            legend=dict(font=dict(color='#FFD700')),
            xaxis=dict(title='Date', color='#FFD700'),
            yaxis=dict(title='Return', color='#FFD700'),
            margin=dict(l=20, r=20, t=40, b=20)
        )
        plot_html = pio.to_html(fig, full_html=False, include_plotlyjs=False, config={"displayModeBar": False})

        # Efficient Frontier (separate graph, use full available data)
        weights = np.linspace(0, 1, 100)
        port_returns = []
        port_vols = []
        for w in weights:
            port_r = w * lo20_returns + (1 - w) * hi20_returns
            port_returns.append(annualized_return(port_r))
            port_vols.append(annualized_volatility(port_r))
        fig_frontier = go.Figure()
        fig_frontier.add_trace(go.Scatter(x=port_vols, y=port_returns, mode='lines+markers', name='Efficient Frontier', line=dict(color='#FF5733', width=3)))
        fig_frontier.update_layout(
            title='Efficient Frontier (Full Period)',
            xaxis=dict(title='Annualized Volatility', color='#FFD700'),
            yaxis=dict(title='Annualized Return', color='#FFD700'),
            plot_bgcolor='#232946',
            paper_bgcolor='#232946',
            font=dict(color='#FFD700'),
            legend=dict(font=dict(color='#FFD700')),
            margin=dict(l=20, r=20, t=40, b=20)
        )
        plot_html += pio.to_html(fig_frontier, full_html=False, include_plotlyjs=False, config={"displayModeBar": False})

        # Full Period (user-selected)
        results += f"""
        <div class='result-section'>
          <div class='result-title'><span class='emoji'>📈</span> <span>Results: <b>Main Period</b> ({main_start_dt.strftime('%Y-%m')} to {main_end_dt.strftime('%Y-%m')})</span></div>
          <table class='result-table'>
            <tr><th>Portfolio</th><th>Annualized Return</th><th>Annualized Volatility</th></tr>
            <tr><td>Lo 20</td><td>{{:.2f}}%</td><td>{{:.2f}}%</td></tr>
            <tr><td>Hi 20</td><td>{{:.2f}}%</td><td>{{:.2f}}%</td></tr>
          </table>
        </div>
        """.format(
            annualized_return(lo20_main) * 100,
            annualized_volatility(lo20_main) * 100,
            annualized_return(hi20_main) * 100,
            annualized_volatility(hi20_main) * 100
        )

        # Sub Period (user-selected)
        lo20_sub = lo20_returns.loc[(lo20_returns.index >= sub_start_dt) & (lo20_returns.index <= sub_end_dt)]
        hi20_sub = hi20_returns.loc[(hi20_returns.index >= sub_start_dt) & (hi20_returns.index <= sub_end_dt)]
        results += f"""
        <div class='result-section'>
          <div class='result-title'><span class='emoji'>🕰️</span> <span>Results: <b>Sub Period</b> ({sub_start_dt.strftime('%Y-%m')} to {sub_end_dt.strftime('%Y-%m')})</span></div>
          <table class='result-table'>
            <tr><th>Portfolio</th><th>Annualized Return</th><th>Annualized Volatility</th></tr>
            <tr><td>Lo 20</td><td>{{:.2f}}%</td><td>{{:.2f}}%</td></tr>
            <tr><td>Hi 20</td><td>{{:.2f}}%</td><td>{{:.2f}}%</td></tr>
          </table>
        </div>
        """.format(
            annualized_return(lo20_sub) * 100,
            annualized_volatility(lo20_sub) * 100,
            annualized_return(hi20_sub) * 100,
            annualized_volatility(hi20_sub) * 100
        )

        lo_dd_val, lo_dd_date = max_drawdown(lo20_sub)
        hi_dd_val, hi_dd_date = max_drawdown(hi20_sub)
        results += f"""
        <div class='result-section'>
          <div class='result-title'><span class='emoji'>📉</span> <span>Max Drawdowns (Sub Period)</span></div>
          <table class='result-table'>
            <tr><th>Portfolio</th><th>Max Drawdown</th><th>Date</th></tr>
            <tr><td>Lo 20</td><td>{{:.2f}}%</td><td>{{}}</td></tr>
            <tr><td>Hi 20</td><td>{{:.2f}}%</td><td>{{}}</td></tr>
          </table>
        </div>
        """.format(
            lo_dd_val * 100, lo_dd_date.strftime('%Y-%m'),
            hi_dd_val * 100, hi_dd_date.strftime('%Y-%m')
        )

        # EDHEC Analysis
        df = pd.read_csv(edhec_file)
        date_col = df.columns[0]
        df[date_col] = pd.to_datetime(df[date_col], errors='coerce', dayfirst=True)
        df.set_index(date_col, inplace=True)
        df = df.apply(pd.to_numeric, errors='coerce')

        df_0918 = df.loc['2009':'2018']
        df_0018 = df.loc['2000':'2018']
        results_dict = {}

        for col in df_0918.columns:
            results_dict[col] = {
                'semidev_2009_2018': safe_stat(semideviation, df_0918[col]),
                'skew_2009_2018': safe_stat(skew, df_0918[col])
            }

        for col in df_0018.columns:
            if col not in results_dict:
                results_dict[col] = {}
            results_dict[col]['kurt_2000_2018'] = safe_stat(kurtosis, df_0018[col])

        highest_semidev = max(results_dict.items(), key=lambda x: x[1]['semidev_2009_2018'] if not np.isnan(x[1]['semidev_2009_2018']) else -np.inf)
        lowest_semidev = min(results_dict.items(), key=lambda x: x[1]['semidev_2009_2018'] if not np.isnan(x[1]['semidev_2009_2018']) else np.inf)
        most_neg_skew = min(results_dict.items(), key=lambda x: x[1]['skew_2009_2018'] if not np.isnan(x[1]['skew_2009_2018']) else np.inf)
        highest_kurt = max(results_dict.items(), key=lambda x: x[1]['kurt_2000_2018'] if not np.isnan(x[1]['kurt_2000_2018']) else -np.inf)

        results += """
        <div class='result-section'>
          <div class='result-title'><span class='emoji'>🏆</span> <span>Hedge Fund Indices Analysis</span></div>
          <table class='result-table'>
            <tr><th>Metric</th><th>Index</th></tr>
            <tr><td>Highest semideviation (2009–2018)</td><td>🥇 {}</td></tr>
            <tr><td>Lowest semideviation (2009–2018)</td><td>🟢 {}</td></tr>
            <tr><td>Most negatively skewed (2009–2018)</td><td>🔻 {}</td></tr>
            <tr><td>Highest kurtosis (2000–2018)</td><td>✨ {}</td></tr>
          </table>
        </div>
        """.format(
            highest_semidev[0],
            lowest_semidev[0],
            most_neg_skew[0],
            highest_kurt[0]
        )

    # Render with Plotly graph if available
    if plot_html:
        results = f'<div class="plotly-graph">' + plot_html + '</div>' + results
    return render_template_string(HTML_FORM, results=results)

if __name__ == '__main__':
    app.run(debug=True)
