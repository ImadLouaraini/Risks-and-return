import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# ========== 1. Load your custom returns CSV ==========

def load_returns(filepath=None):
    """
    Load portfolio returns from a CSV file.
    CSV format: Date index + return columns in % or decimals.
    """
    if filepath:
        df = pd.read_csv(filepath, index_col=0, parse_dates=True)
        df = df / 100 if df.abs().max().max() > 1 else df
        return df.dropna()
    else:
        raise ValueError("Please provide a valid file path to your returns CSV.")

# ========== 2. Skewness & Kurtosis ==========

def mean_median_skew_comparison(returns):
    """
    Compare mean vs. median and skewness.
    Returns a DataFrame showing mean, median, and whether mean > median.
    """
    summary = pd.concat([
        returns.mean().rename("Mean"),
        returns.median().rename("Median"),
        (returns.mean() > returns.median()).rename("Mean > Median")
    ], axis=1)
    return summary

def calculate_skewness(returns):
    """
    Returns the skewness of the returns (as Series or scalar).
    """
    return returns.aggregate(stats.skew)

def calculate_kurtosis(returns):
    """
    Returns the kurtosis of the returns (as Series or scalar).
    """
    return returns.aggregate(stats.kurtosis)

# ========== 3. Normality Test ==========

def test_normality(returns, level=0.01):
    """
    Applies the Jarque-Bera test to check for normality.
    Returns True if the series is normal at the given significance level.
    """
    def is_normal(series):
        _, pval = stats.jarque_bera(series)
        return pval > level
    if isinstance(returns, pd.DataFrame):
        return returns.aggregate(is_normal)
    else:
        return is_normal(returns)

# ========== 4. Generate Normal Sample for Reference ==========

def generate_normal_returns(mean=0, std=0.15, n_obs=263):
    """
    Simulates returns from a normal distribution.
    """
    normal = np.random.normal(loc=mean, scale=std, size=(n_obs, 1))
    return pd.Series(normal.flatten(), name="Normal Sample")

# ========== 5. Run Full Skewness & Kurtosis Analysis ==========

def analyze_distribution(returns):
    """
    Run and print full distribution stats and plots.
    """
    print("\nðŸ“Š Mean vs Median Comparison:")
    print(mean_median_skew_comparison(returns))

    print("\nðŸ“ˆ Skewness:")
    print(calculate_skewness(returns).sort_values())

    print("\nðŸ”º Kurtosis:")
    print(calculate_kurtosis(returns).sort_values())

    print("\nðŸ§ª Normality Test (Jarque-Bera, 1% level):")
    print(test_normality(returns, level=0.01))

    returns.hist(bins=50, figsize=(12, 8), layout=(int(np.ceil(len(returns.columns)/2)), 2))
    plt.suptitle("Return Distributions")
    plt.tight_layout()
    plt.show()

# ========== Example Usage ==========

# Load your own data:
# returns = load_returns("your_returns_file.csv")
# analyze_distribution(returns)

# Example with simulated normal returns:
if __name__ == "__main__":
    # Simulate normal returns
    normal_rets = generate_normal_returns()
    analyze_distribution(pd.DataFrame(normal_rets))
