import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
file_path = r'C:/Users/imadl/Desktop/Stocks/Portfolios_Formed_on_ME_monthly_EW.csv'
df = pd.read_csv(file_path)

# --- Step 1: Clean and prepare data ---
df.columns = df.columns.str.strip()  # Remove leading/trailing spaces

# Rename first column as date and parse it
date_col = df.columns[0]
df[date_col] = pd.to_datetime(df[date_col], format='%Y%m')
df.set_index(date_col, inplace=True)

# Replace invalid values with NaN
df.replace([-99.99, -999], np.nan, inplace=True)

# --- Step 2: Identify relevant columns ---
lo20_col = next(col for col in df.columns if 'lo 20' in col.lower())
hi20_col = next(col for col in df.columns if 'hi 20' in col.lower())

# --- Step 3: Convert returns from % to decimal ---
lo20_returns = df[lo20_col] / 100
hi20_returns = df[hi20_col] / 100
lo20_returns = lo20_returns.dropna()
hi20_returns = hi20_returns.dropna()

# --- Step 4: Define analysis functions ---
def annualized_return(r):
    compounded_growth = (1 + r).prod()
    n_months = r.shape[0]
    return compounded_growth**(12 / n_months) - 1

def annualized_volatility(r):
    return r.std() * np.sqrt(12)

def max_drawdown(r):
    wealth_index = (1 + r).cumprod()
    previous_peaks = wealth_index.cummax()
    drawdowns = (previous_peaks - wealth_index) / previous_peaks
    max_dd_value = drawdowns.max()
    max_dd_date = drawdowns.idxmax()
    return max_dd_value, max_dd_date

# --- Step 5: Full period analysis ---
lo20_ann_return = annualized_return(lo20_returns)
hi20_ann_return = annualized_return(hi20_returns)
lo20_ann_vol = annualized_volatility(lo20_returns)
hi20_ann_vol = annualized_volatility(hi20_returns)

print("\n=== Results: Full Period ===")
print(f"Lo 20 Annualized Return: {lo20_ann_return*100:.2f}%")
print(f"Lo 20 Annualized Volatility: {lo20_ann_vol*100:.2f}%")
print(f"Hi 20 Annualized Return: {hi20_ann_return*100:.2f}%")
print(f"Hi 20 Annualized Volatility: {hi20_ann_vol*100:.2f}%")

# --- Step 6: 1999–2015 period analysis ---
lo20_9915 = lo20_returns.loc['1999-01-01':'2015-12-31']
hi20_9915 = hi20_returns.loc['1999-01-01':'2015-12-31']

lo20_ann_return_9915 = annualized_return(lo20_9915)
hi20_ann_return_9915 = annualized_return(hi20_9915)
lo20_ann_vol_9915 = annualized_volatility(lo20_9915)
hi20_ann_vol_9915 = annualized_volatility(hi20_9915)

print("\n=== Results: 1999–2015 Period ===")
print(f"Lo 20 Annualized Return: {lo20_ann_return_9915*100:.2f}%")
print(f"Lo 20 Annualized Volatility: {lo20_ann_vol_9915*100:.2f}%")
print(f"Hi 20 Annualized Return: {hi20_ann_return_9915*100:.2f}%")
print(f"Hi 20 Annualized Volatility: {hi20_ann_vol_9915*100:.2f}%")

# --- Step 7: Max Drawdowns for 1999–2015 ---
lo20_max_dd_value, lo20_max_dd_date = max_drawdown(lo20_9915)
hi20_max_dd_value, hi20_max_dd_date = max_drawdown(hi20_9915)

print("\n=== Assignment Answers: Max Drawdown (1999–2015) ===")
print(f"Q11: Max Drawdown of Lo 20 (SmallCap): {lo20_max_dd_value*100:.2f}%")
print(f"Q12: Max Drawdown Date of Lo 20 (SmallCap): {lo20_max_dd_date.strftime('%Y-%m')}")
print(f"Q13: Max Drawdown of Hi 20 (LargeCap): {hi20_max_dd_value*100:.2f}%")
print(f"Q14: Max Drawdown Date of Hi 20 (LargeCap): {hi20_max_dd_date.strftime('%Y-%m')}")

# --- Optional: Plotting returns ---
# lo20_returns.plot(title="Lo 20 Monthly Returns")
# hi20_returns.plot(title="Hi 20 Monthly Returns")
# plt.show()
